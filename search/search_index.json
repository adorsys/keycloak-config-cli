{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Table of Contents","text":"<ul> <li>Config Files</li> <li>Variable Substitution</li> <li>Logging</li> <li>Supported Features</li> <li>Compatibility with Keycloak</li> <li>Build this Project</li> <li>Run Integration Tests</li> <li>Run this Project</li> <li>Docker</li> <li>Helm</li> <li>Configuration</li> <li>Perform Release</li> <li>Commercial Support</li> </ul>"},{"location":"#keycloak-config-cli","title":"keycloak-config-cli","text":"<p>keycloak-config-cli is a Keycloak utility to ensure the desired configuration state for a realm based on a JSON/YAML file. The format of the JSON/YAML file based on the export realm format. Store and handle the configuration files inside git just like normal code. A Keycloak restart isn't required to apply the configuration.</p>"},{"location":"#config-files","title":"Config files","text":"<p>The config files are based on the keycloak export files. You can use them to re-import your settings. But keep your files as small as possible. Remove all UUIDs and all stuff which is default set by keycloak.</p> <p>moped.json is a full working example file you can consider. Other examples are located in the test resources.</p>"},{"location":"#variable-substitution","title":"Variable Substitution","text":"<p>keycloak-config-cli supports variable substitution of config files. This could be enabled by <code>import.var-substitution.enabled=true</code> (disabled by default).</p> <p>Variables exposed by spring boot (through configtree or external configuration) can be accessed by <code>$(property.name)</code>.</p> <p>In additional, the string substitution support multiple prefixes for different approaches</p> <pre><code>Base64 Decoder:        $(base64Decoder:SGVsbG9Xb3JsZCE=)\nBase64 Encoder:        $(base64Encoder:HelloWorld!)\nJava Constant:         $(const:java.awt.event.KeyEvent.VK_ESCAPE)\nDate:                  $(date:yyyy-MM-dd)\nDNS:                   $(dns:address|apache.org)\nEnvironment Variable:  $(env:USERNAME)\nFile Content:          $(file:UTF-8:src/test/resources/document.properties)\nJava:                  $(java:version)\nLocalhost:             $(localhost:canonical-name)\nProperties File:       $(properties:src/test/resources/document.properties::mykey)\nResource Bundle:       $(resourceBundle:org.example.testResourceBundleLookup:mykey)\nScript:                $(script:javascript:3 + 4)\nSystem Property:       $(sys:user.dir)\nURL Decoder:           $(urlDecoder:Hello%20World%21)\nURL Encoder:           $(urlEncoder:Hello World!)\nURL Content (HTTP):    $(url:UTF-8:http://www.apache.org)\nURL Content (HTTPS):   $(url:UTF-8:https://www.apache.org)\nURL Content (File):    $(url:UTF-8:file:///$(sys:user.dir)/src/test/resources/document.properties)\nXML XPath:             $(xml:src/test/resources/document.xml:/root/path/to/node)\n</code></pre> <p>to replace the values with java system properties or environment variables. Recursive variable replacement like <code>$(file:UTF-8:$(env:KEYCLOAK_PASSWORD_FILE))</code> is enabled by default if <code>import.var-substitution.enabled</code> is set to <code>true</code>.</p> <p>The variable substitution is running before the json parser gets executed. This allows json structures or complex values.</p> <p>See Apache Common <code>StringSubstitutor</code> documentation for more information and advanced usage.</p> <p>Note: Since variable substitution is a part of the keycloak-config-cli, it's done locally. This means, the environment variables need to be available where keycloak-config-cli is executed.</p> <p>If <code>import.var-substitution.prefix=${</code> and <code>import.var-substitution.suffix=}</code> (default in keycloak-config-cli 3.x) is set, then keycloak builtin variables like <code>${role_uma_authorization}</code> needs to be escaped by <code>$${role_uma_authorization}</code>.</p>"},{"location":"#logging","title":"Logging","text":""},{"location":"#json-logging-support","title":"JSON logging support","text":"<p>keycloak-config-cli supports logging in JSON format. To enable, set <code>SPRING_PROFILES_ACTIVE=json-log</code>.</p>"},{"location":"#log-level","title":"Log level","text":"CLI Option ENV Variable Description Default --logging.level.root LOGGING_LEVEL_ROOT define the root log level <code>info</code> --logging.level.keycloak-config-cli LOGGING_LEVEL_KEYCLOAKCONFIGCLI log level of keycloak-config-cli components value of <code>logging.level.root</code> --logging.level.http LOGGING_LEVEL_HTTP log level http requests between keycloak-config-cli and Keycloak value of <code>logging.level.root</code> --logging.level.realm-config LOGGING_LEVEL_REALMCONFIG if set to trace, the realm config including sensitive information will be logged value of <code>logging.level.root</code>"},{"location":"#supported-features","title":"Supported features","text":"<p>See: docs/FEATURES.md</p>"},{"location":"#compatibility-with-keycloak","title":"Compatibility with keycloak","text":"<p>Since keycloak-config-cli 4.0 will support the latest 4 releases of keycloak, if possible. There are some exceptions:</p> <ul> <li>keycloak-config-cli will try the keep an extended support for RH-SSO</li> <li>keycloak-config-cli will cut the support if keycloak introduces some breaking changes</li> </ul>"},{"location":"#build-this-project","title":"Build this project","text":"<p>keycloak-config-cli using maven to build and test keycloak-config-cli. In case maven is not installed on your system, the <code>mvnw</code> command will download maven for you.</p> <p>Further development requirements - Java Development Kit (JDK) - Docker Desktop or an alternative replacement (e.g Rancher Desktop)</p> <p>Before running <code>mvn verify</code>, you have to set the <code>JAVA_HOME</code> environment variable to prevent some test failures.</p> <p>If your are working with a Docker Desktop replacement, some of the Integrationtests can fail due to internal DNS Lookups (host.docker.internal is not reachable). In this case the host can be replaced by a property.</p> <pre><code>mvn verify -DJUNIT_LDAP_HOST=an.alternate.host.or.ip\n</code></pre>"},{"location":"#run-integration-tests-against-real-keycloak","title":"Run integration tests against real keycloak","text":"<p>We are using TestContainers in our integration tests. To run the integration tests a configured docker environment is required.</p> <pre><code>./mvnw verify\n\n# Windows only\nmvnw.cmd verify\n</code></pre>"},{"location":"#run-this-project","title":"Run this project","text":"<p>Start a local keycloak on port 8080:</p> <pre><code>docker-compose down --remove-orphans &amp;&amp; docker-compose up keycloak\n</code></pre> <p>before performing following command:</p> <pre><code>java -jar ./target/keycloak-config-cli.jar \\\n    --keycloak.url=http://localhost:8080 \\\n    --keycloak.ssl-verify=true \\\n    --keycloak.user=admin \\\n    --keycloak.password=admin123 \\\n    --import.files.locations=./contrib/example-config/moped.json\n</code></pre>"},{"location":"#docker","title":"Docker","text":"<p>A docker images is available at DockerHub (docker.io/adorsys/keycloak-config-cli) and quay.io (quay.io/adorsys/keycloak-config-cli)</p> <p>Available docker tags</p> Tag Description <code>latest</code> latest available release of keycloak-config-cli which is built against the latest supported Keycloak release. <code>latest-x.y.z</code> latest available release of keycloak-config-cli which is built against the Keycloak version <code>x.y.z</code>. <code>edge</code> latest commit on the main branch and which is built against the latest supported Keycloak release. <code>a.b.c</code> keycloak-config-cli version <code>a.b.c</code> which is built against the latest supported Keycloak release. <code>a.b.c-x.y.z</code> keycloak-config-cli version <code>a.b.c</code> which is built against the Keycloak version <code>x.y.z</code>. <code>maven</code> See below <p>Additionally, the tag <code>maven</code> contains the source code and compile keycloak-config-cli at runtime. This has the advantage to keycloak-config-cli with Keycloak versions, that not official supported., e.g.:</p> <pre><code>docker run --rm -ti -v $PWD:/config/ -eKEYCLOAK_VERSION=23.0.1 -eMAVEN_CLI_OPTS=\"-B -ntp -q\" adorsys/keycloak-config-cli:edge-build\n</code></pre>"},{"location":"#docker-run","title":"Docker run","text":"<p>For docker <code>-e</code> you have to replace dots with underscores.</p> <pre><code>docker run \\\n    -e KEYCLOAK_URL=\"http://&lt;your keycloak host&gt;:8080/\" \\\n    -e KEYCLOAK_USER=\"&lt;keycloak admin username&gt;\" \\\n    -e KEYCLOAK_PASSWORD=\"&lt;keycloak admin password&gt;\" \\\n    -e KEYCLOAK_AVAILABILITYCHECK_ENABLED=true \\\n    -e KEYCLOAK_AVAILABILITYCHECK_TIMEOUT=120s \\\n    -e IMPORT_FILES_LOCATIONS='/config/*' \\\n    -v &lt;your config path&gt;:/config \\\n    adorsys/keycloak-config-cli:latest\n</code></pre>"},{"location":"#docker-build","title":"Docker build","text":"<p>You can build your own docker image by running</p> <pre><code>docker build -t keycloak-config-cli .\n</code></pre>"},{"location":"#helm","title":"Helm","text":"<p>We provide a helm chart here.</p> <p>Since it makes no sense to deploy keycloak-config-cli as standalone application, you could add it as dependency to your chart deployment.</p> <p>Checkout helm docs about chart dependencies!</p>"},{"location":"#configuration","title":"Configuration","text":""},{"location":"#cli-option-environment-variables","title":"CLI option / Environment Variables","text":""},{"location":"#keycloak-options","title":"Keycloak options","text":"CLI Option ENV Variable Description Default Docs --keycloak.url <code>KEYCLOAK_URL</code> Keycloak URL including web context. Format: <code>scheme://hostname:port/web-context</code>. - --keycloak.user <code>KEYCLOAK_USER</code> login user name <code>admin</code> --keycloak.password <code>KEYCLOAK_PASSWORD</code> login user password - --keycloak.client-id <code>KEYCLOAK_CLIENTID</code> login clientId <code>admin-cli</code> --keycloak.client-secret <code>KEYCLOAK_CLIENTSECRET</code> login client secret - --keycloak.grant-type <code>KEYCLOAK_GRANTTYPE</code> login grant_type <code>password</code> --keycloak.login-realm <code>KEYCLOAK_LOGINREALM</code> login realm <code>master</code> --keycloak.ssl-verify <code>KEYCLOAK_SSLVERIFY</code> Verify ssl connection to keycloak <code>true</code> --keycloak.http-proxy <code>KEYCLOAK_HTTPPROXY</code> Connect to Keycloak via HTTP Proxy. Format: <code>scheme://hostname:port</code> - --keycloak.connect-timeout <code>KEYCLOAK_CONNECTTIMEOUT</code> Connection timeout <code>10s</code> --keycloak.read-timeout <code>KEYCLOAK_READTIMEOUT</code> Read timeout <code>10s</code> configured as Java Duration --keycloak.availability-check.enabled <code>KEYCLOAK_AVAILABILITYCHECK_ENABLED</code> Wait until Keycloak is available <code>false</code> configured as Java Duration --keycloak.availability-check.timeout <code>KEYCLOAK_AVAILABILITYCHECK_TIMEOUT</code> Wait timeout for keycloak availability check <code>120s</code>"},{"location":"#import-options","title":"Import options","text":"CLI Option ENV Variable Description Default Docs --import.validate <code>IMPORT_VALIDATE</code> Validate configuration settings <code>false</code> --import.parallel <code>IMPORT_PARALLEL</code> Enable parallel import of certain resources <code>false</code> --import.files.locations <code>IMPORT_FILES_LOCATIONS</code> Location of config files (URL, file path, or Ant-style pattern) - IMPORT.md --import.files.include-hidden-files <code>IMPORT_FILES_INCLUDE_HIDDEN_FILES</code> Includes files that marked as hidden <code>false</code> --import.files.excludes <code>IMPORT_FILES_EXCLUDES</code> Exclude files with Ant-style pattern - --import.cache.enabled <code>IMPORT_CACHE_ENABLED</code> Enable caching of import file locations <code>true</code> --import.cache.key <code>IMPORT_CACHE_KEY</code> Cache key for importing config. <code>default</code> --import.remote-state.enabled <code>IMPORT_REMOTESTATE_ENABLED</code> Enable remote state management. Purge only resources managed by keycloak-config-cli. <code>true</code> MANAGED.md --import.remote-state.encryption-key <code>IMPORT_REMOTESTATE_ENCRYPTIONKEY</code> Enables remote state in encrypted format. If unset, state will be stored in plain - --import.var-substitution.enabled <code>IMPORT_VARSUBSTITUTION_ENABLED</code> Enable variable substitution config files <code>false</code> --import.var-substitution.nested <code>IMPORT_VARSUBSTITUTION_NESTED</code> Expand variables in variables. <code>true</code> --import.var-substitution.undefined-is-error <code>IMPORT_VARSUBSTITUTION_UNDEFINEDISTERROR</code> Raise exceptions, if variables are not defined. <code>true</code> --import.var-substitution.prefix <code>IMPORT_VARSUBSTITUTION_PREFIX</code> Configure the variable prefix, if <code>import.var-substitution.enabled</code> is <code>true</code>. <code>$(</code> --import.var-substitution.suffix <code>IMPORT_VARSUBSTITUTION_SUFFIX</code> Configure the variable suffix, if <code>import.var-substitution.enabled</code> is <code>true</code>. <code>)</code> --import.behaviors.sync-user-federation <code>IMPORT_BEHAVIORS_SYNC_USER_FEDERATION</code> Enable the synchronization of user federation. <code>false</code> --import.behaviors.remove-default-role-from-user <code>IMPORT_BEHAVIORS_REMOVEDEFAULTROLEFROMUSER</code> The default setting of this flag prevents keycloak-config-cli from removing <code>default-roles-$REALM</code>, even if its not defined in the import json. To make keycloak-config-cli able to remove the <code>default-role-$REALM</code>, <code>import.remove-default-role-from-user</code> must be set to true. In conclusion, you have to add the <code>default-role-$REALM</code> to the realm import on certain users, if you want not remove the <code>default-role-$REALM</code>. <code>false</code> --import.behaviors.skip-attributes-for-federated-user <code>IMPORT_BEHAVIORS_SKIP_ATTRIBUTESFORFEDERATEDUSER</code> Set attributes to null for federated users to avoid read only conflicts <code>false</code> --import.behaviors.checksum-with-cache-key <code>IMPORT_BEHAVIORS_CHECKSUM_WITH_CACHE_KEY</code> Use cache key to store the checksum, if set to <code>false</code> a checksum for each import file is stored <code>true</code> --import.behaviors.checksum-changed <code>IMPORT_BEHAVIORS_CHECKSUM_CHANGED</code> Defines the behavior if the checksum of an imported file has changed. Set to <code>fail</code> when import should be aborted, <code>continue</code> reimport and update the checksum. <code>continue</code>"},{"location":"#spring-boot-options","title":"Spring boot options","text":"CLI Option ENV Variable Description Default Docs --spring.profiles.active <code>SPRING_PROFILES_ACTIVE</code> enable spring profiles. comma separated <code>-</code> Set the Active Spring Profiles --spring.config.import <code>SPRING_CONFIG_IMPORT</code> See below <code>info</code> Configure properties values through files --logging.level.root <code>LOGGING_LEVEL_ROOT</code> define the root log level <code>info</code> Logging --debug <code>DEBUG</code> enables debug mode of spring boot <code>false</code> <p>See application.properties for all available settings.</p> <p>For docker <code>-e</code> you have to remove hyphens and replace dots with underscores.</p> <p>Take a look at spring relax binding or binding from Environment Variables if you need alternative spellings.</p>"},{"location":"#configure-properties-values-through-files","title":"Configure properties values through files","text":"<p>By define an environment variable <code>SPRING_CONFIG_IMPORT=configtree:/run/secrets/</code>, the values of properties can be provided via files instead of plain environment variable values.</p> <p>Example: To configure the property <code>keycloak.password</code> in this case, the file should be in <code>/run/secrets/keycloak.password</code>.</p> <p>The configuration and secret support in Docker Swarm is a perfect match for this use case.</p> <p>Checkout the spring docs to get more information about the configuration trees feature in spring boot.</p>"},{"location":"#perform-release","title":"Perform release","text":"<p>Building releases requires gpg signing.</p> <p>Example to create and add a key to yout git config on MacOS</p> <pre><code>brew install gnupg\ngpg --version\ngpg --full-generate-key\n# follow instructions\ngpg --list-keys\ngpg --list-secret-keys --keyid-format=short\n# check the 8 digit code eg \"ssb   xxxxxxx/E51442F5 2022-01-01 [X]\"\ngit config --global user.signingkey E51442F5\n</code></pre> <p>Finally add the key to your Github account under Settings -&gt; SSH and GPG keys -&gt; New GPG key</p> <p>Create release via maven release plugin:</p> <p><code>shell script ./mvnw -Dresume=false release:prepare release:clean git push --follow-tags</code></p>"},{"location":"#commercial-support","title":"Commercial support","text":"<p>Checkout here for commercial support.</p>"},{"location":"RedHat-SSO-compatibility/","title":"RedHat SSO compatibility","text":"<p>In general, RedHat SSO based on Keycloak. In general, keycloak-config-cli is compatible with RedHat SSO.</p> <p>Some specific RH SSO version may differ from keycloak releases which introduce an incompatibility between keycloak-config-cli.</p> <p>While keycloak-config-cli not officially supports RH SSO, it's possible to build keycloak-config-cli against RH SSO.</p>"},{"location":"RedHat-SSO-compatibility/#requirements-installed-on-system","title":"Requirements installed on system","text":"<ul> <li>Java JDK 8+</li> </ul>"},{"location":"RedHat-SSO-compatibility/#steps","title":"Steps","text":""},{"location":"RedHat-SSO-compatibility/#clone-repo","title":"Clone Repo","text":"<pre><code>git clone https://github.com/adorsys/keycloak-config-cli.git\ngit checkout v3.4.0\n</code></pre>"},{"location":"RedHat-SSO-compatibility/#patch-pomxml","title":"Patch pom.xml","text":"<p>This step can be skip if keycloak-config-cli version 4.4.0 or higher is used.</p> <p>Enrich the pom.xml with the changes from: #583</p>"},{"location":"RedHat-SSO-compatibility/#find-correct-release-version-for-keycloak","title":"Find correct release version for keycloak","text":"<p>Identify the internal version of keycloak. Check https://access.redhat.com/articles/2342881</p> <p>Then look at https://mvnrepository.com/artifact/org.keycloak/keycloak-core?repo=redhat-ga to find the correct Keycloak version identifier. For Keycloak 9.0.13, its 9.0.13.redhat-00006.</p>"},{"location":"RedHat-SSO-compatibility/#build","title":"Build","text":"<pre><code>./mvnw clean package -Prh-sso -Dkeycloak.version=9.0.13.redhat-00006\n</code></pre> <p>In case there are compiler errors, then RH introduce breaking changes. But I'm not going to adjust code for such old versions. Sorry.</p>"},{"location":"RedHat-SSO-compatibility/#grab-and-test","title":"Grab and test","text":"<p>In case the build is fine, you build is in <code>target/keycloak-config-cli.jar</code></p>"},{"location":"helm-chart/","title":"Helm Chart","text":""},{"location":"helm-chart/#helm-chart","title":"Helm Chart","text":"<p>The Helm chart for keycloak-config-cli is available via GitHub Pages. To use it,</p> <ol> <li> <p>Add the Helm repository: <pre><code>helm repo add keycloak-config-cli https://adorsys.github.io/keycloak-config-cli/charts\n</code></pre></p> </li> <li> <p>Update your local Helm chart repository cache: <pre><code>helm repo update\n</code></pre></p> </li> <li>Install the chart: <pre><code>helm install keycloak-config-cli keycloak-config-cli/keycloak-config-cli\n</code></pre></li> </ol>"},{"location":"import-settings/","title":"Import settings","text":"<p>The CLI option <code>--import.files.locations</code> support multiple locations of files. In general, all resource location supported by Springs RessourceLoader and PathMatchingResourcePatternResolver are supported. This includes remote locations and zip files as well.</p>"},{"location":"import-settings/#ant-style-path-patterns","title":"Ant-style path patterns.","text":"<p>Part of this mapping code has been kindly borrowed from Apache Ant.</p> <p>The path patten using the following rules:</p> <ul> <li><code>?</code> matches one character</li> <li><code>*</code> matches zero or more characters</li> <li><code>**</code> matches zero or more directories in a path</li> <li><code>{label:regex}</code> matches regex pattern</li> </ul>"},{"location":"import-settings/#examples","title":"Examples","text":"Example Description <code>realm.json</code> realm.json from current work dir <code>path/*.json</code> All files from directory <code>path</code> that ends with <code>.json</code> <code>path/realm_?.json</code> All files from directory <code>path</code> that with name <code>realm_*.json</code>. <code>*</code> can be any single character. <code>path/**/a*.json</code> All files recursively from directory <code>path</code> that begins with <code>a</code> and ends with <code>.json</code> <code>path/{filename:[abc]+}.json</code> All files from directory <code>path</code> that matches regex pattern <code>[abc]+</code>. <code>https://example.com/realm.json</code> Load file from <code>https://example.com/realm.json</code>. <code>https://user:password@example.com/realm.json</code> Load file from <code>https://example.com/realm.json</code> and authenticate with auth basic. Preemptive authentication is not supported. <code>zip:file:path/file.zip!/*</code> All files from zip archive <code>path/file.zip</code> <code>zip:file:path/file.zip!/**/*.yaml</code> All files recursively from zip archive <code>path/file.zip</code> that ends with <code>.yaml</code>"},{"location":"managed-resource/","title":"Full managed resources","text":"<p>keycloak-config-cli manage some types of resources absolutely. For example if a <code>group</code> isn't defined inside the import json but other <code>groups</code> specified, keycloak-config-cli will calculate the difference and delete the <code>group</code> from keycloak.</p> <p>In some cases it is required to include some keycloak defaults because keycloak-config-cli can't detect if the entity comes from a user or auto created by keycloak itself.</p> <p>There are 2 modes to ensure a specific behavior:</p>"},{"location":"managed-resource/#keycloak-should-not-manage-type-of-resources","title":"Keycloak should not manage type of resources:","text":"<p>For example if you don't define any <code>groups</code> inside the import json, keycloak does not touch any <code>groups</code>.</p>"},{"location":"managed-resource/#keycloak-manage-type-of-resources","title":"Keycloak manage type of resources:","text":"<p>For example define any <code>groups</code> you want inside the import json, keycloak ensure that the groups are available but other groups will be deleted. If you define <code>groups</code> but set an empty array, keycloak will delete all groups in keycloak.</p>"},{"location":"managed-resource/#supported-full-managed-resources","title":"Supported full managed resources","text":"Type Additional Information Resource Name Groups - <code>group</code> Required Actions You have to copy the default one to you import json. <code>required-action</code> Client Scopes - <code>client-scope</code> Scope Mappings - <code>scope-mapping</code> Client Scope Mappings - <code>client-scope-mapping</code> Roles - <code>role</code> Components You have to copy the default components to you import json. <code>component</code> Sub Components You have to copy the default components to you import json. <code>sub-component</code> Authentication Flows You have to copy the default components to you import json, expect builtin flows <code>authentication-flow</code> Identity Providers - <code>identity-provider</code> Identity Provider Mappers - <code>identity-provider-mapper</code> Clients - <code>client</code> Clients Authorization Resources The 'Default Resource' is always included. <code>client-authorization-resources</code> Clients Authorization Policies - <code>client-authorization-policies</code> Clients Authorization Scopes - <code>client-authorization-scopes</code> Message Bundles Only message bundles imported with config-cli will be managed/deleted. <code>message-bundles</code>"},{"location":"managed-resource/#disable-deletion-of-managed-entities","title":"Disable deletion of managed entities","text":"<p>If you don't delete properties of a specific type, you can disable this behavior by default a properties like <code>import.managed.&lt;entity&gt;=&lt;full|no-delete&gt;</code>, e.g.: <code>import.managed.required-actions=no-delete</code></p>"},{"location":"managed-resource/#state-management","title":"State management","text":"<p>If <code>import.remote-state.enabled</code> is set to <code>true</code> (default value), keycloak-config-cli will purge only resources they created before by keycloak-config-cli. If <code>import.remote-state.enabled</code> is set to <code>false</code>, keycloak-config-cli will purge all existing entities if they are not defined in import json.</p>"},{"location":"managed-resource/#supported-resources","title":"Supported resources","text":"<p>Following entities does have saved state:</p> <ul> <li>Required Actions</li> <li>Components</li> </ul>"},{"location":"supported-features/","title":"Supported features","text":"<p>Keycloak Config CLI simplifies managing Keycloak configurations with its extensive feature set. Below is a summary of the functionalities introduced across various versions, enhancing the tool's ability to automate and streamline Keycloak operations:</p> Feature Since Description Create clients 1.0.0 Create client configuration (inclusive protocolMappers) while creating or updating realms Update clients 1.0.0 Update client configuration (inclusive protocolMappers) while updating realms Manage fine-grained authorization of clients 2.2.0 Add and remove fine-grained authorization resources and policies of clients Add roles 1.0.0 Add roles while creating or updating realms Update roles 1.0.0 Update role properties while updating realms Add composites to roles 1.3.0 Add role with realm-level and client-level composite roles while creating or updating realms Add composites to roles 1.3.0 Add realm-level and client-level composite roles to existing role while creating or updating realms Remove composites from roles 1.3.0 Remove realm-level and client-level composite roles from existing role while creating or updating realms Add users 1.0.0 Add users (inclusive password!) while creating or updating realms Add users with roles 1.0.0 Add users with realm-level and client-level roles while creating or updating realms Update users 1.0.0 Update user properties (inclusive password!) while updating realms Add role to user 1.0.0 Add realm-level and client-level roles to user while updating realm Remove role from user 1.0.0 Remove realm-level or client-level roles from user while updating realm Add groups to user 2.0.0 Add groups to user while updating realm Remove groups from user 2.0.0 Remove groups from user while updating realm Add authentication flows and executions 1.0.0 Add authentication flows and executions while creating or updating realms Update authentication flows and executions 1.0.0 Update authentication flow properties and executions while updating realms Remove authentication flows and executions 2.0.0 Remove existing authentication flow properties and executions while updating realms Update builtin authentication flows and executions 2.0.0 Update builtin authentication flow properties and executions while updating realms Add authentication configs 1.0.0 Add authentication configs while creating or updating realms Update authentication configs 2.0.0 Update authentication configs while updating realms Remove authentication configs 2.0.0 Remove existing authentication configs while updating realms Add components 1.0.0 Add components while creating or updating realms Update components 1.0.0 Update components properties while updating realms Remove components 2.0.0 Remove existing sub-components while creating or updating realms Update sub-components 1.0.0 Add sub-components properties while creating or updating realms Remove sub-components 2.0.0 Remove existing sub-components while creating or updating realms Add groups 1.3.0 Add groups (inclusive subgroups!) to realm while creating or updating realms Update groups 1.3.0 Update existing group properties and attributes while creating or updating realms Remove groups 1.3.0 Remove existing groups while updating realms Add/Remove group attributes 1.3.0 Add or remove group attributes in existing groups while updating realms Add/Remove group roles 1.3.0 Add or remove roles to/from existing groups while updating realms Update/Remove subgroups 1.3.0 Like groups, subgroups may also be added/updated and removed while updating realms Add scope-mappings 1.0.0 Add scope-mappings while creating or updating realms Add roles to scope-mappings 1.0.0 Add roles to existing scope-mappings while updating realms Remove roles from scope-mappings 1.0.0 Remove roles from existing scope-mappings while updating realms Add required-actions 1.0.0 Add required-actions while creating or updating realms Update required-actions 1.0.0 Update properties of existing required-actions while updating realms Remove required-actions 2.0.0 Remove existing required-actions while updating realms Add identity providers 1.2.0 Add identity providers while creating or updating realms Update identity providers 1.2.0 Update identity providers while updating realms (improved with 2.0.0) Remove identity providers 2.0.0 Remove identity providers while updating realms Add identity provider mappers 2.0.0 Add identityProviderMappers while updating realms Update identity provider mappers 2.0.0 Update identityProviderMappers while updating realms Remove identity provider mappers 2.0.0 Remove identityProviderMappers while updating realms Add clientScopes 2.0.0 Add clientScopes (inclusive protocolMappers) while creating or updating realms Update clientScopes 2.0.0 Update existing (inclusive protocolMappers) clientScopes while creating or updating realms Remove clientScopes 2.0.0 Remove existing clientScopes while creating or updating realms Add clientScopeMappings 2.5.0 Add clientScopeMapping while creating or updating realms Update clientScopeMappings 2.5.0 Update existing clientScopeMappings while creating or updating realms Remove clientScopeMappings 2.5.0 Remove existing clientScopeMappings while creating or updating realms Synchronize user federation 3.5.0 Synchronize the user federation defined on the realm configuration Synchronize user profile 5.4.0 Synchronize the user profile configuration defined on the realm configuration Synchronize client-policies 5.6.0 Synchronize the client-policies (clientProfiles and clientPolicies) while updating realms Synchronize message bundles 5.12.0 Synchronize message bundles defined on the realm configuration"},{"location":"supported-features/#specificities","title":"Specificities","text":""},{"location":"supported-features/#client-authenticationflowbindingoverrides","title":"Client - authenticationFlowBindingOverrides","text":"<p><code>authenticationFlowBindingOverrides</code> on client is configured by Keycloak like this,</p> <pre><code>{\n  \"authenticationFlowBindingOverrides\": {\n    \"browser\": \"ad7d518c-4129-483a-8351-e1223cb8eead\"\n  }\n}\n</code></pre> <p>In order to be able to configure this in <code>keycloak-config-cli</code>, we use authentication flow alias instead of <code>id</code> (which is not known)</p> <p><code>keycloak-config-cli</code> will automatically resolve the alias reference to its ids.</p> <p>So if you need this, you have to configure it like :</p> <pre><code>{\n  \"authenticationFlowBindingOverrides\": {\n    \"browser\": \"my awesome browser flow\"\n  }\n}\n</code></pre>"},{"location":"supported-features/#user-initial-password","title":"User - initial password","text":"<p>To set an initial password that is only respect while the user is created, the userLabel must be named <code>initial</code>.</p> <pre><code>{\n  \"users\": [\n    {\n      \"username\": \"user\",\n      \"email\": \"user@mail.de\",\n      \"enabled\": true,\n      \"credentials\": [\n        {\n          \"type\": \"password\",\n          \"userLabel\": \"initial\",\n          \"value\": \"start123\"\n        }\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"supported-features/#fine-grained-permissions-for-keycloak-objects","title":"Fine-grained permissions for Keycloak objects","text":"<p>Keycloak supports configuring access to certain resource (such as clients, identity providers, roles and groups) using advanced policies.</p> <p>The resources and policies are configured on the client named <code>realm-management</code>:</p> <pre><code>{\n  \"clients\": [\n    {\n      \"clientId\": \"realm-management\",\n      \"authorizationSettings\": {\n        \"allowRemoteResourceManagement\": false,\n        \"policyEnforcementMode\": \"ENFORCING\",\n        \"resources\": [\n          {\n            \"name\": \"idp.resource.1dcbfbe7-1cee-4d42-8c39-d8ed74b4cf22\",\n            \"type\": \"IdentityProvider\",\n            \"ownerManagedAccess\": false,\n            \"scopes\": [\n              {\n                \"name\": \"token-exchange\"\n              }\n            ]\n          }\n        ],\n        \"policies\": [\n          {\n            \"name\": \"token-exchange.permission.idp.1dcbfbe7-1cee-4d42-8c39-d8ed74b4cf22\",\n            \"type\": \"scope\",\n            \"logic\": \"POSITIVE\",\n            \"decisionStrategy\": \"UNANIMOUS\",\n            \"config\": {\n              \"resources\": \"[\\\"idp.resource.1dcbfbe7-1cee-4d42-8c39-d8ed74b4cf22\\\"]\",\n              \"scopes\": \"[\\\"token-exchange\\\"]\"\n            }\n          }\n        ]\n      }\n    }\n  ],\n  \"identityProviders\": [\n    {\n      \"alias\": \"my-identity-provider\",\n      \"providerId\": \"oidc\",\n      \"enabled\": true\n    }\n  ]\n}\n</code></pre> <p>Both resources and policies are named in such a way that the name contains the UUID of the referenced entity (identity provider in the example). This is problematic, as the UUID is not known.</p> <p>Therefore <code>keycloak-config-cli</code> will automatically resolve the object ids during import, using a special dollar syntax:</p> <p>The following transformations are currently implemented:</p> Resource Permission Resolution strategy <code>client.resource.$client-id</code> <code>&lt;scope&gt;.permission.client.$client-id</code> Find a client by client id <code>idp.resource.$alias</code> <code>&lt;scope&gt;.permission.idp.$alias</code> Find an identity provider by alias <code>role.resource.$Realm Role Name</code> <code>&lt;scope&gt;.permission.$Realm Role Name</code> (Note: No <code>.role.</code>) Find a realm role by name <code>group.resource.$/Full Path/To Group</code> <code>&lt;scope&gt;.permission.group.$/Full Path/To Group</code> Find a group by full path <p>The dollar only marks the name for substitution but is not part of it. It is an import failure when the referenced entity does not exist.</p> <p>The example above should therefore be rewritten as:</p> <pre><code>{\n  \"clients\": [\n    {\n      \"clientId\": \"realm-management\",\n      \"authorizationSettings\": {\n        \"allowRemoteResourceManagement\": false,\n        \"policyEnforcementMode\": \"ENFORCING\",\n        \"resources\": [\n          {\n            \"name\": \"idp.resource.$my-identity-provider\",\n            \"type\": \"IdentityProvider\",\n            \"ownerManagedAccess\": false,\n            \"scopes\": [\n              {\n                \"name\": \"token-exchange\"\n              }\n            ]\n          }\n        ],\n        \"policies\": [\n          {\n            \"name\": \"token-exchange.permission.idp.$my-identity-provider\",\n            \"type\": \"scope\",\n            \"logic\": \"POSITIVE\",\n            \"decisionStrategy\": \"UNANIMOUS\",\n            \"config\": {\n              \"resources\": \"[\\\"idp.resource.$my-identity-provider\\\"]\",\n              \"scopes\": \"[\\\"token-exchange\\\"]\"\n            }\n          }\n        ]\n      }\n    }\n  ],\n  \"identityProviders\": [\n    {\n      \"alias\": \"my-identity-provider\",\n      \"providerId\": \"oidc\",\n      \"enabled\": true\n    }\n  ]\n}\n</code></pre>"},{"location":"config/Authenticator-Configuration/","title":"Authenticator configuration","text":""},{"location":"config/Authenticator-Configuration/#authenticatorconfig","title":"AuthenticatorConfig","text":""},{"location":"config/Authenticator-Configuration/#introduction","title":"Introduction","text":"<p>AuthenticatorConfig is a powerful feature in Keycloak that allows you to customize authentication flows by configuring specific authenticators. This documentation will guide you through using AuthenticatorConfig with the Keycloak Config CLI tool.</p>"},{"location":"config/Authenticator-Configuration/#syntax","title":"Syntax","text":"<p>AuthenticatorConfig is defined within the authenticationFlows section of your Keycloak configuration JSON file. Here's the basic structure: <pre><code>{\n  \"authenticationFlows\": [\n    {\n      \"alias\": \"my-custom-flow\",\n      \"authenticationExecutions\": [\n        {\n          \"authenticator\": \"auth-username-password-form\",\n          \"requirement\": \"REQUIRED\",\n          \"authenticatorConfig\": \"my-custom-config\"\n        }\n      ]\n    }\n  ],\n  \"authenticatorConfig\": [\n    {\n      \"alias\": \"my-custom-config\",\n      \"config\": {\n        \"key1\": \"value1\",\n        \"key2\": \"value2\"\n      }\n    }\n  ]\n}\n</code></pre></p>"},{"location":"config/Authenticator-Configuration/#key-components","title":"Key Components","text":""},{"location":"config/Authenticator-Configuration/#alias","title":"Alias","text":"<p>The alias field is a unique identifier for your AuthenticatorConfig. It's used to reference the configuration from within authentication executions1.</p>"},{"location":"config/Authenticator-Configuration/#config","title":"Config","text":"<p>The config object contains key-value pairs that define the specific settings for your authenticator. The available keys and their meanings depend on the authenticator being configured1.</p>"},{"location":"config/Authenticator-Configuration/#common-use-cases","title":"Common Use Cases","text":"<p>Password Policy Configuration</p> <pre><code>{\n  \"alias\": \"password-policy-config\",\n  \"config\": {\n    \"passwordPolicy\": \"length(8) and upperCase(1) and lowerCase(1) and digits(1)\"\n  }\n}\n\nOTP Policy Configuration\njson\n{\n  \"alias\": \"otp-config\",\n  \"config\": {\n    \"otpType\": \"totp\",\n    \"otpHashAlgorithm\": \"HmacSHA1\",\n    \"otpPolicyDigits\": \"6\",\n    \"otpPolicyPeriod\": \"30\"\n  }\n}\n</code></pre>"},{"location":"config/Authenticator-Configuration/#best-practices","title":"Best Practices","text":"<ul> <li><code>Unique Aliases</code>: Ensure each AuthenticatorConfig has a unique alias to avoid conflicts1.</li> <li><code>Consistent Naming</code>: Use descriptive and consistent naming conventions for your aliases.</li> <li><code>Minimal Configuration</code>: Only include necessary configuration keys to keep your JSON file clean and manageable.</li> <li><code>Version Control</code>: Store your Keycloak configuration files in a version control system for easy tracking of changes7.</li> </ul>"},{"location":"config/Authenticator-Configuration/#troubleshooting","title":"Troubleshooting","text":"<p>If you encounter issues with your AuthenticatorConfig: - Verify that the alias in the authenticatorConfig section matches the one referenced in authenticationExecutions. - Check that the config keys are valid for the specific authenticator you're configuring. - Ensure that the Keycloak Config CLI tool has the necessary permissions to apply the configuration changes. You can click here for more information</p>"},{"location":"config/addind-multiple-post-logout-redirect-uris/","title":"Adding Multiple post.logout.redirect.uris","text":""},{"location":"config/addind-multiple-post-logout-redirect-uris/#adding-multiple-postlogoutredirecturis-in-keycloak-configuration","title":"Adding Multiple <code>post.logout.redirect.uris</code> in Keycloak Configuration.","text":"<p>To correctly import multiple <code>post.logout.redirect.uris</code>, you should use the <code>##</code> separators to concatenate URIs into a single string. Here's a step-by-step guide on how to do this:</p>"},{"location":"config/addind-multiple-post-logout-redirect-uris/#open-the-import-file","title":"Open the Import File.","text":"<p>First, navigate to your JSON configuration file where the realm and clients are defined.</p>"},{"location":"config/addind-multiple-post-logout-redirect-uris/#add-multiple-values-for-postlogoutredirecturis","title":"Add Multiple Values for <code>post.logout.redirect.uris</code>.","text":"<p>In the attributes section where you want to add multiple <code>post.logout.redirect.uris</code>, ensure that you use the <code>##</code> separators. Here\u2019s an example configuration:</p> <p>Here is the syntax:</p> <pre><code>\"attributes\": {\n\"post.logout.redirect.uris\": \"https://app1.example.com/logout##https://app2.example.com/logout##https://app3.example.com/logout\"\n},\n</code></pre> <p>This is a simple json example that can be used to see how it works. <pre><code>{\n  \"realm\": \"your-realm\",\n  \"clients\": [\n    {\n      \"clientId\": \"your-client-id\",\n      \"enabled\": true,\n      \"redirectUris\": [\n        \"https://app1.example.com/callback\",\n        \"https://app2.example.com/callback\",\n        \"https://app3.example.com/callback\"\n      ],\n      \"webOrigins\": [\n        \"https://app1.example.com\",\n        \"https://app2.example.com\",\n        \"https://app3.example.com\"\n      ],\n      \"attributes\": {\n        \"post.logout.redirect.uris\": \"https://app1.example.com/logout##https://app2.example.com/logout##https://app3.example.com/logout\"\n      },\n      \"protocol\": \"openid-connect\",\n      \"publicClient\": false,\n      \"standardFlowEnabled\": true,\n      \"implicitFlowEnabled\": false,\n      \"directAccessGrantsEnabled\": true,\n      \"serviceAccountsEnabled\": false,\n      \"authorizationServicesEnabled\": false,\n      \"fullScopeAllowed\": true\n    }\n  ]\n}\n</code></pre></p> <p>In the above configuration, you specify multiple logout redirect URIs separated by <code>##</code>.</p>"},{"location":"config/addind-multiple-post-logout-redirect-uris/#load-the-configuration","title":"Load the Configuration.","text":"<p>Once your configuration file is updated, load it into your Keycloak instance.</p>"},{"location":"config/addind-multiple-post-logout-redirect-uris/#verify-in-the-keycloak-admin-ui","title":"Verify in the Keycloak Admin UI.","text":"<p> After loading the configuration, check the Keycloak Admin UI to verify that the <code>post.logout.redirect.uris</code> are correctly imported with multiple values. You should see the following URIs:</p> <ul> <li><code>https://app1.example.com/logout</code></li> <li><code>https://app2.example.com/logout</code></li> <li><code>https://app3.example.com/logout</code></li> </ul>"},{"location":"config/addind-multiple-post-logout-redirect-uris/#conclusion","title":"Conclusion","text":"<p>By following the above steps, you can successfully add multiple <code>post.logout.redirect.uris</code> in your Keycloak configuration. This approach ensures that all specified URIs are respected during logout redirection processes.</p>"},{"location":"config/apply-jsonschema-in-intellij/","title":"Adding a JSON Schema Validator in IntelliJ","text":"<p>This guide walks you through the process of adding a JSON Schema validator in IntelliJ to enhance your JSON file validation and auto-completion.</p>"},{"location":"config/apply-jsonschema-in-intellij/#step-1-open-intellij-preferences","title":"Step 1: Open IntelliJ Preferences","text":"<ol> <li>Open IntelliJ.</li> <li>Navigate to File &gt; Settings (or IntelliJ IDEA &gt; Preferences on macOS).</li> </ol>"},{"location":"config/apply-jsonschema-in-intellij/#step-2-navigate-to-json-schema-settings","title":"Step 2: Navigate to JSON Schema Settings","text":"<ol> <li>In the settings menu, search for JSON Schema in the search bar.</li> <li>Click on Languages &amp; Frameworks &gt; Schemas and DTDs &gt; JSON Schema Mappings.</li> </ol>"},{"location":"config/apply-jsonschema-in-intellij/#step-3-add-a-new-json-schema","title":"Step 3: Add a New JSON Schema","text":"<ol> <li>Click the + icon to add a new schema.</li> <li>Choose Schema File and select one of the following options:<ul> <li>From File: If you have a local schema file, navigate to and select it.</li> <li>From URL: If the schema is hosted online, enter the URL.</li> <li>Built-in Schema: Select from IntelliJ's built-in options.</li> </ul> </li> </ol>"},{"location":"config/apply-jsonschema-in-intellij/#step-4-map-the-schema-to-your-files","title":"Step 4: Map the Schema to Your Files","text":"<ol> <li>Under Mapped Patterns, click the + icon.</li> <li>Add the file pattern or directory for which the schema should apply. For example, to apply the schema to all <code>config.json</code> files, add <code>config.json</code> as a pattern.</li> <li>You can also use wildcard patterns like <code>.*\\.(json|yaml|yml|JSON)$</code> or specify a folder like <code>src/config/*.json</code>.</li> </ol>"},{"location":"config/apply-jsonschema-in-intellij/#step-5-validate-and-apply-changes","title":"Step 5: Validate and Apply Changes","text":"<ol> <li>Click OK to save the schema configuration.</li> <li>Open a JSON file to ensure IntelliJ is validating it against the schema. You should see:<ul> <li>Auto-completion suggestions.</li> <li>Error messages for invalid fields or types.</li> </ul> </li> </ol>"},{"location":"config/environmental-variable-substitution-for-json-array/","title":"Environment Variable Substitution for JSON Arrays","text":""},{"location":"config/environmental-variable-substitution-for-json-array/#environment-variable-substitution-for-json-arrays","title":"Environment Variable Substitution for JSON Arrays","text":"<p>This document provides a step-by-step guide on importing environment variables into JSON arrays using the Keycloak Config CLI.</p>"},{"location":"config/environmental-variable-substitution-for-json-array/#prerequisites","title":"Prerequisites","text":"<ul> <li>Ensure you have dotenv installed and configured in your environment.</li> <li>Have a Keycloak Config CLI setup ready for performing realm imports.</li> </ul>"},{"location":"config/environmental-variable-substitution-for-json-array/#steps-to-perform-import-of-environment-variables","title":"Steps to Perform Import of Environment Variables","text":"<ul> <li> <p>Step 1: Configure the .env File</p> <p>Create or update your .env file to include the necessary environment variables. For example:</p> </li> </ul> <p><pre><code>CLIENT_WEBAPP_REDIRECT_URIS=\"https://app1.example.com/callback\",\"https://app2.example.com/callback\",\"https://app3.example.com/callback\"\n</code></pre> This environment variable contains a comma-separated list of redirect URIs.</p> <ul> <li>Step 2: Prepare the JSON Configuration File</li> </ul> <p>Include the environment variable reference in your JSON configuration file. For example:</p> <p><pre><code>{\n  \"enabled\": true,\n  \"realm\": \"realmWithClient\",\n  \"clients\": [\n    {\n      \"clientId\": \"my-client\",\n      \"redirectUris\": [\"$(env:CLIENT_WEBAPP_REDIRECT_URIS)\"]\n    }\n  ]\n}\n</code></pre> Here, the <code>$(env:CLIENT_WEBAPP_REDIRECT_URIS)</code> syntax indicates that the value should be replaced with the corresponding environment variable.</p> <ul> <li>Step 3: Execute the Import Command</li> </ul> <p>Use the dotenv command together with the import command to load the .env file and execute the Keycloak Config CLI import:</p> <p><pre><code>dotenv -e /PATH/TO/THE/.env kc-cli import --file /PATH/TO/CONFIG.JSON\n</code></pre> Replace /PATH/TO/THE/.env with the full path to your .env file and /PATH/TO/CONFIG.JSON with the path to your JSON configuration file.</p> <ul> <li>Step 4: Enable Variable Substitution</li> </ul> <p>Set the IMPORT_VARSUBSTITUTION_ENABLED environment variable to true to activate variable substitution:</p> <p><pre><code>export IMPORT_VARSUBSTITUTION_ENABLED=true\n</code></pre> Ensure this environment variable is set in your shell or runtime environment before performing the import.</p>"},{"location":"config/minimal-configuration/","title":"Minimal Configurations From exported JSON","text":""},{"location":"config/minimal-configuration/#getting-minimal-import-after-realm-export","title":"Getting Minimal Import After Realm Export","text":"<p>This script is designed to clean up a Keycloak realm configuration file (in JSON format) by removing unnecessary fields, including all <code>id</code> fields, from the configuration. It is useful for simplifying the export of Keycloak realm data, especially when certain details like IDs are not needed for sharing or backup purposes.</p>"},{"location":"config/minimal-configuration/#features","title":"Features","text":"<ul> <li>Removes unnecessary default fields such as <code>accessTokenLifespan</code>, <code>offlineSessionIdleTimeout</code>, and others that are typically not needed for a reimport.</li> <li>Simplifies the realm configuration while retaining all necessary properties for further processing or importing into another Keycloak instance.</li> </ul>"},{"location":"config/minimal-configuration/#requirements","title":"Requirements","text":"<ul> <li>jq: This script requires <code>jq</code>, a command-line JSON processor, to manipulate the JSON data.</li> </ul> <p>You can install <code>jq</code> using the following commands:</p> <pre><code>- On Ubuntu/Debian:\n  ```bash\n  sudo apt-get install jq\n  ```\n- On macOS (with Homebrew):\n  ```bash\n  brew install jq\n  ```\n</code></pre>"},{"location":"config/minimal-configuration/#usage","title":"Usage","text":"<p>Ensure you have the Keycloak realm configuration file (in JSON format) that you want to clean. The file should be named <code>realm-config.json</code> or you can modify the script to use your desired file path.</p>"},{"location":"config/minimal-configuration/#download-or-copy-the-script","title":"Download or Copy the Script","text":"<pre><code>#!/bin/bash\n\nINPUT_FILE=\"realm-config.json\"\nOUTPUT_FILE=\"keycloak-realm-export-minimal.json\"\n\njq 'del(\n  .id, .containerId, .accessTokenLifespanForImplicitFlow,\n  .accessTokenLifespanForWebApps, .accessTokenLifespan, .offlineSessionIdleTimeout,\n  .accessTokenLifespanInSeconds, .ssoSessionIdleTimeout, .ssoSessionMaxLifespan,\n  .ssoSessionIdleTimeoutRememberMe, .ssoSessionMaxLifespanRememberMe,\n  .accessCodeLifespan, .accessCodeLifespanLogin, .accessCodeLifespanUserAction,\n  .accessCodeLifespanMobile, .notBefore, .registrationAllowed,\n  .registrationEmailAsUsername, .rememberMe, .verifyEmail, .resetPasswordFlow,\n  .editUsernameAllowed, .bruteForceProtected, .permanentLockout, .maxFailureWaitSeconds,\n  .minimumQuickLoginWaitSeconds, .waitIncrementSeconds, .quickLoginCheckMilliSeconds,\n  .maxDeltaTimeSeconds, .failureFactor, .requiredCredentials, .otpPolicyType,\n  .otpPolicyAlgorithm, .otpPolicyInitialCounter, .otpPolicyDigits, .otpPolicyLookAheadWindow,\n  .otpPolicyPeriod, .otpSupportedApplications, .webAuthnPolicyRpEntityName,\n  .webAuthnPolicyAttestationConveyancePreference, .webAuthnPolicyAuthenticatorAttachment,\n  .webAuthnPolicyRequireResidentKey, .webAuthnPolicyUserVerificationRequirement,\n  .webAuthnPolicyCreateTimeout, .webAuthnPolicyAssertionTimeout,\n  .webAuthnPolicyRegistrationRecoveryEnabled, .webAuthnPolicyRegistrationRecoveryCodesQuantity,\n  .webAuthnPolicyRegistrationTokenBindingRequired, .webAuthnPolicyRegistrationAttestationConveyancePreference,\n  .webAuthnPolicyRegistrationAuthenticatorSelectionCriteria, .keys\n) \n| walk(if type == \"object\" then del(.id) else . end)' &lt; \"$INPUT_FILE\" &gt; \"$OUTPUT_FILE\"\n\necho \"Minimal export saved to $OUTPUT_FILE\"\n</code></pre>"},{"location":"config/minimal-configuration/#make-the-script-executable","title":"make the script executable","text":"<pre><code>    chmod +x clean-realm-config.sh\n</code></pre> <p>Now execute the script, making sure that you have inputed the correct file paths.</p>"},{"location":"config/remote-state-management/","title":"Remote State Management","text":"<p>Remote state management ensures that configurations are tracked and only modified when necessary, enabling safe and controlled updates to Keycloak configurations without altering unmanaged resources.</p> <p>Ensure your project directory has the following structure for sample demonstration locally:</p> <pre><code>keycloak-setup/\n\u251c\u2500\u2500 docker-compose.yml\n\u251c\u2500\u2500 import.sh\n\u251c\u2500\u2500 keycloak-config-cli.jar\n\u2514\u2500\u2500 realms/\n\u2514\u2500\u2500 state-management.json\n</code></pre> <p>Each file serves the following purpose:</p> <ul> <li><code>docker-compose.yml</code>: Defines the Keycloak service.</li> <li><code>import.sh</code>: Custom shell script for running the Keycloak Config CLI against our Keycloak instance.</li> <li><code>keycloak-config-cli.jar</code>: Keycloak-config-cli is compatible with different versions of Keycloak and actively maintained.</li> <li><code>realms/state-management.json</code>: JSON file with realm configuration.</li> </ul> <p>In <code>docker-compose.yml</code>, configure the Keycloak service without a Keycloak Config CLI container, as we will be handling imports manually in this case.</p> <pre><code>services:\n  keycloak:\n    image: quay.io/keycloak/keycloak:25.0.1\n    environment:\n      KEYCLOAK_ADMIN: admin\n      KEYCLOAK_ADMIN_PASSWORD: admin\n      KC_HOSTNAME: localhost\n      KC_HTTP_PORT: \"8080\"\n      KC_HTTP_ENABLED: \"true\"\n      KC_METRICS_ENABLED: \"true\"\n      KC_HEALTH_ENABLED: \"true\"\n    ports:\n      - \"8080:8080\"\n    volumes:\n      - ./realms:/opt/keycloak/data/import:z\n    command:\n      - \"start-dev\"\n</code></pre> <p>This file configures Keycloak with essential parameters and maps <code>./realms</code> for importing configuration files.</p> <p>The <code>import.sh</code> script uses the <code>keycloak-config-cli.jar</code> to apply configurations. This script will:</p> <ol> <li>Copy the config file to the container.</li> <li>Run the import using the CLI JAR file, with remote state management enabled.</li> </ol> <p>Create <code>import.sh</code> as follows:</p> <pre><code>#!/bin/bash\n\n# Check if a configuration file is provided\nif [ -z \"$1\" ]; then\n  echo \"Usage: ./import.sh &lt;config-file&gt;\"\n  exit 1\nfi\n\nCONFIG_FILE=$1\n\n# Run the Keycloak Config CLI tool with the updated options\njava -jar keycloak-config-cli.jar \\\n  --keycloak.url=\"http://localhost:8080\" \\\n  --keycloak.user=\"admin\" \\\n  --keycloak.password=\"admin\" \\\n  --import.managed.group=\"full\" \\\n  --import.remote-state.enabled=\"true\" \\\n  --import.files.locations=\"$CONFIG_FILE\"\n\necho \"Import of $CONFIG_FILE with remote-state enabled is complete.\"\n</code></pre> <p>Create <code>state-management.json</code> under <code>realms/</code>, which defines a Keycloak realm, clients, and roles.</p> <p>Define the realm, clients, roles, and scope mappings for demonstration:</p> <pre><code>{\n  \"realm\": \"master\",\n  \"enabled\": true,\n  \"clients\": [\n    {\n      \"clientId\": \"imported-client\",\n      \"enabled\": true,\n      \"protocol\": \"openid-connect\",\n      \"fullScopeAllowed\": false\n    }\n  ],\n  \"roles\": {\n    \"realm\": [\n      {\n        \"name\": \"my-role\",\n        \"description\": \"A test role\"\n      }\n    ]\n  },\n  \"clientScopes\": [\n    {\n      \"name\": \"custom-scope\",\n      \"description\": \"Custom client scope\",\n      \"protocol\": \"openid-connect\",\n      \"attributes\": {\n        \"include.in.token.scope\": \"true\"\n      }\n    }\n  ],\n  \"scopeMappings\": [\n    {\n      \"client\": \"imported-client\",\n      \"roles\": [\n        \"my-role\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"config/remote-state-management/#verifying-remote-state-management","title":"Verifying Remote State Management","text":"<p>With remote state management enabled, Keycloak Config CLI will only modify resources it initially created, preserving custom or manually added configurations.</p>"},{"location":"config/remote-state-management/#starting-keycloak","title":"Starting Keycloak","text":"<p>To start Keycloak, run:</p> <pre><code>docker-compose up -d\n</code></pre>"},{"location":"config/remote-state-management/#testing-remote-state","title":"Testing Remote State","text":"<p>Manually create a dedicated client to test remote state management.</p>"},{"location":"config/remote-state-management/#conclusion","title":"Conclusion","text":"<p>In this guide, we covered the basics of setting up Keycloak with Docker, creating an import script for configuration, and enabling remote state management using <code>keycloak-config-cli</code>.</p> <p>Feel free to reach out if you have any questions or need further assistance!</p>"}]}